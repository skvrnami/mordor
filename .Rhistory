library(devtools)
pos <- read.csv("~/repos/github/morphoditaR/data/pos.csv")
View(pos)
subpos <- read.csv("~/repos/github/morphoditaR/data/subpos.csv")
View(subpos)
gender <- read.csv("~/repos/github/morphoditaR/data/gender.csv")
View(gender)
number <- read.csv("~/repos/github/morphoditaR/data/number.csv")
View(number)
case <- read.csv("~/repos/github/morphoditaR/data/case.csv")
View(case)
possgender <- read.csv("~/repos/github/morphoditaR/data/possgender.csv")
View(possgender)
possnumber <- read.csv("~/repos/github/morphoditaR/data/possnumber.csv")
View(possnumber)
person <- read.csv("~/repos/github/morphoditaR/data/person.csv")
View(person)
tense <- read.csv("~/repos/github/morphoditaR/data/tense.csv")
View(tense)
grade <- read.csv("~/repos/github/morphoditaR/data/grade.csv")
View(grade)
negation <- read.csv("~/repos/github/morphoditaR/data/negation.csv")
View(negation)
voice <- read.csv("~/repos/github/morphoditaR/data/voice.csv")
View(voice)
var <- read.csv("~/repos/github/morphoditaR/data/var.csv")
View(var)
TAGS <- list(
POS = pos,
SUBPOS = subpos,
GENDER = gender,
NUMBER = number,
CASE = case,
POSSGENDER = possgender,
POSSNUMBER = possnumber,
PERSON = person,
TENSE = tense,
GRADE = grade,
NEGATION = negation,
VOICE = voice,
VAR = var
)
TAGS$POS$Value
View(case)
pos <- read.csv("~/repos/github/morphoditaR/data/pos.csv", stringsAsFactors=FALSE)
View(pos)
subpos <- read.csv("~/repos/github/morphoditaR/data/subpos.csv", comment.char="#", stringsAsFactors=FALSE)
View(subpos)
gender <- read.csv("~/repos/github/morphoditaR/data/gender.csv", stringsAsFactors=FALSE)
View(gender)
number <- read.csv("~/repos/github/morphoditaR/data/number.csv", stringsAsFactors=FALSE)
View(number)
case <- read.csv("~/repos/github/morphoditaR/data/case.csv", stringsAsFactors=FALSE)
View(case)
possgender <- read.csv("~/repos/github/morphoditaR/data/possgender.csv", stringsAsFactors=FALSE)
View(possgender)
possnumber <- read.csv("~/repos/github/morphoditaR/data/possnumber.csv", stringsAsFactors=FALSE)
View(possnumber)
person <- read.csv("~/repos/github/morphoditaR/data/person.csv", stringsAsFactors=FALSE)
View(person)
tense <- read.csv("~/repos/github/morphoditaR/data/tense.csv", stringsAsFactors=FALSE)
View(tense)
grade <- read.csv("~/repos/github/morphoditaR/data/grade.csv", stringsAsFactors=FALSE)
View(grade)
negation <- read.csv("~/repos/github/morphoditaR/data/negation.csv", stringsAsFactors=FALSE)
View(negation)
voice <- read.csv("~/repos/github/morphoditaR/data/voice.csv", stringsAsFactors=FALSE)
View(voice)
var <- read.csv("~/repos/github/morphoditaR/data/var.csv", stringsAsFactors=FALSE)
View(var)
TAGS <- list(
POS = pos,
SUBPOS = subpos,
GENDER = gender,
NUMBER = number,
CASE = case,
POSSGENDER = possgender,
POSSNUMBER = possnumber,
PERSON = person,
TENSE = tense,
GRADE = grade,
NEGATION = negation,
VOICE = voice,
VAR = var
)
TAGS$POS$Value
TAGS$GRADE$Value %<>% as.character
devtools::use_data(TAGS)
data("TAGS")
tags_en <- read.csv("~/repos/github/morphoditaR/data/tags_en.csv", stringsAsFactors=FALSE)
View(tags_en)
TAGS_EN <- tags_en
devtools::use_data(TAGS_EN)
data("remek")
View(remek)
remek$lyrics[1]
text <- "V pondělí se v první předvolební debatě diskutovalo o nízké nezaměstnanosti,
kauze Čapí hnízdo nebo vizi, jak zlepšit české školství.
Došlo i na inkluzi ve školství nebo odliv lékařů do zahraničí.
Ve studiu zasedli zástupci Strany zelených, Řádu národa - Vlastenecké unie,
Svobody a přímá demokracie - Tomio Okamura, Bloku proti islamizaci - Obrana domova,
ODA, ANO 2011 a České pirátské strany. "
devtools::load_all(".")
tagged <- tag_morphodita(text)
View(tagged$output)
splitted <- split_tags(tagged$output)
splitted <- split_tags(tagged)
View(splitted)
View(tagged$output)
View(splitted$output)
devtools::load_all(".")
splitted <- split_tags(tagged)
View(splitted$output)
splitted$output$VAR
devtools::load_all(".")
splitted <- split_tags(tagged)
View(splitted$output)
?tag_morphodita
tagged <- tag_morphodita(text, convert_tagset = "strip_lemma_comment")
splitted <- split_tags(tagged)
View(splitted$output)
devtools::load_all(".")
splitted <- split_tags(tagged)
View(splitted$output)
recoded <- recode_tags(splitted)
devtools::load_all(".")
splitted <- split_tags(tagged)
recoded <- recode_tags(splitted)
View(recoded$output)
library(morphoditar)
data("esazlesa")
esazlesa
load("~/repos/github/morphoditaR/data/dukla.rda")
load("~/repos/github/morphoditaR/data/gattaca.rda")
load("~/repos/github/morphoditaR/data/plusminusnula.rda")
load("~/repos/github/morphoditaR/data/remek.rda")
load("~/repos/github/morphoditaR/data/role.rda")
devtools::document()
devtools::document()
devtools::document()
get_salutation <- function(data){
gen_morphodita(data) %>%
split_tags() %>%
subset(NUMBER == "S" & CASE == 5,
select = "form", drop = TRUE) %>%
tail(1)
}
test_that("K. H. Mácha could use MorphoDiTas API",
expect_equal(get_salutation("Karel"), "Karle"))
get_salutation("Karel")
gen_morphodita("Karel")
gen_morphodita("Karel") %>% split_tags()
#' Perform morphological generation
#'
#'
#' @param data A word for which its forms should be generated (must be lemma)
#' @param convert_tagset Apply specified tag set converter
#' (pdt_to_conll2009 / strip_lemma_comment / strip_lemma_id)
#' @param ... Other parameters accepted by API
#' @seealso http://lindat.mff.cuni.cz/services/morphodita/api-reference.php
gen_morphodita <- function(data,
convert_tagset = "strip_lemma_id", ...){
## To DO:
## Check if it is a lemma
out <- httr::GET(
url = "http://lindat.mff.cuni.cz/services/morphodita/api/generate",
query = list(data = data,
output = "json",
convert_tagset = convert_tagset, ...))
structure(
list(
url = out$url,
model = jsonlite::fromJSON(stringr::str_conv(out$content, "UTF-8"))$model,
tagset = tagset,
lang = substr(jsonlite::fromJSON(stringr::str_conv(out$content, "UTF-8"))$model, 1, 2),
output = do.call(rbind, lapply(jsonlite::fromJSON(
stringr::str_conv(out$content, "UTF-8"))$result,
function(x) x[, !names(x) %in% c("space", "spaces")]))
),
class = "morphodita_api"
)
}
gen_morphodita("Karel") %>% split_tags()
#' Perform morphological generation
#'
#'
#' @param data A word for which its forms should be generated (must be lemma)
#' @param convert_tagset Apply specified tag set converter
#' (pdt_to_conll2009 / strip_lemma_comment / strip_lemma_id)
#' @param ... Other parameters accepted by API
#' @seealso http://lindat.mff.cuni.cz/services/morphodita/api-reference.php
gen_morphodita <- function(data,
convert_tagset = "strip_lemma_id", ...){
## To DO:
## Check if it is a lemma
tagset <- convert_tagset
out <- httr::GET(
url = "http://lindat.mff.cuni.cz/services/morphodita/api/generate",
query = list(data = data,
output = "json",
convert_tagset = convert_tagset, ...))
structure(
list(
url = out$url,
model = jsonlite::fromJSON(stringr::str_conv(out$content, "UTF-8"))$model,
tagset = tagset,
lang = substr(jsonlite::fromJSON(stringr::str_conv(out$content, "UTF-8"))$model, 1, 2),
output = do.call(rbind, lapply(jsonlite::fromJSON(
stringr::str_conv(out$content, "UTF-8"))$result,
function(x) x[, !names(x) %in% c("space", "spaces")]))
),
class = "morphodita_api"
)
}
gen_morphodita("Karel") %>% split_tags()
tag_gen <- gen_morphodita("Karel") %>% split_tags()
tag_gen %>% [[`output`
tag_gen %>% `[[`(output)
tag_gen %>% `[[`("output")
get_salutation <- function(data){
gen_morphodita(data) %>%
split_tags() %>%
`[[`("output") %>%
subset(NUMBER == "S" & CASE == 5,
select = "form", drop = TRUE) %>%
tail(1)
}
get_salutation("Karel")
message("Nečum,", "vole")
devtools::document()
?data
library(morphoditar)
devtools::build_vignettes()
devtools::use_travis()
